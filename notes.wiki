*Skupiamy się na wydajnym renderingu przezroczystości; Chcemy szybko zamknąć ten temat*

Aktualne cele:
- przygotowanie zoptymalizowanej wersji w aktualnym schemacie renderingu
- zrobienie wersji raster_tile i ew. raster_block
- opisanie algorytmu
- wrzucenie gdzieś do sieci

Bugi: 
- poziome linie widoczne na chestnut_tree01
- miganie na sponzie w górnej części (screenshot)
- niedokładne wyznaczanie ilości trisów per tile (dużo więcej niż faktycznie)


-----------------------------------------------------------------------------------------
                             === Jak ma działać raster_tile ===
-----------------------------------------------------------------------------------------

- Na razie po prostu używamy indeksów wygenerowanych przez tile_dispatcher; docelowo moglibyśmy
  w sumie generować sobie takie indeksy i dodatkowo może nawet od razu rasteryzować trókąty
  dla 4 tile-i (dla całego rzędu)

  Może na razie po prostu z jednej listy trójkątów generuję listy per blok a następnie każdą z nich
  jeden po drugim sortuję (optymalizacje potem?)
  A jak z precomputeowaniem danych trókątów ?
  Chyba robię to per-blok ...; Duża różnica: wcześnej było per-bin
  Zróbmy wersję która obsłuży wszystkie case-y najpierw

  Najpierw generujemy rzędy a potem docelowe bloki? W tile-u mamy max 4 rzędy
  Może od razu bloki?

  Jak zminimalizować operacje na pamięci ?

  Średni case:
  - San Miguel: 1024 trisów na tile, 32 trisy na blok
  - PowerPlant: 


  Może łatwiej będzie przerobić raster_bin na raster_tile:
  - tak samo, tylko używam indeksów tile-owych


  A może łatwiej byłoby przerobić w jakiś sposób raster_bin?
  - napoczątku musiałbym dodać fazę filtrującą trókąty albo renderującą je rząd po rzędzie?

- Sortowanie robiłbym na jak dużych blokach? W tym wypadku chyba na 4x4, żbo to jest sytuacja z
  potencjalnie dużą liczbą trókątów. Nie mogę zakładać, że mi się zmieszczą...

  Jakie mam limity ?
  Max 64K na bin, max 2K na tile?
  Max 512 na blok ? Blok 8x4 czy 4x4?
  Na hairballu jest nawet 2K
  Jeśli będę przetwarzać 1 tile na raz to nie będzie problemu, zmiesci się...
  sortowanie robię jak?
  W takiej sytuacji muszę wszystkie wątki oddelegować do sortowania jednego bloku,
  bo równocześnie więcej w SMEM się nie zmieści. Po prostu dynamicznie alokuję wątki do bloków?
  Opcje: 1/2/4/8/16 bloków na raz ? zależnie od max(block count)?
  Czy max 2k na tile to nie jest za mało?

  Na hairballu jest 68K...

-----------------------------------------------------------------------------------------
                             === Pomysły na optymalizacje ===
-----------------------------------------------------------------------------------------

- optymalizacja loadSamples?

- podział raster bin na wersję 256 i 512; rozdzielanie w classifierze

- co dalej? czy chcę jeszcze przyspieszać raster_bin ?

- mogłbym teraz zrobić raster_tile, tak, żeby rozwiązanie było pełne

- różne segmenty mogą mieć różną ilość pracy do wykonania; niektóre mogą kończyć szybciej, inne później
  czy da się jakoś zmienić pipeline aby praca była bardziej wyrównana?



-----------------------------------------------------------------------------------------
                          === Nie działające / nie pewne pomysły ===
-----------------------------------------------------------------------------------------

* Odnoszenie się do tile-row-trisów i nie generowanie tile-rowów
  BRAK PRZYSPIESZENIA w wersji 16x16, w wersji 16x4 nie da się tego łatwo zaimplementować...

? Precompute-owanie parametrów do scanline-a
  Czy dałoby się zrobić w fixed-point 16 bit ? A może 24 bity też ma sens?
  Fakt jest taki, że cała początkowa faza (process quads) na skomlikowanych scenach zajmuje ok 1%...
  W takim razie to chyba nie ma sensu...; Generowanie scanline-ów to pewnie mniej niż 25%...

-----------------------------------------------------------------------------------------
                                      === Statsy ===
-----------------------------------------------------------------------------------------

Wersja 16x4 2560x1330 (a82143f1 20.04):
            total  setup  bins  tiles  raster_bin
    #boxes: 1785   24     59    5      1624
     bunny: 571    69     52    5      382
conference: 1324   61     111   5      1007
    dragon: 957    187    72    100    276
    sponza: 3864   62     124   6      3521
    teapot: 536    28     45    5      414
 white_oak: 14794  54     263   6      14208


Wersja 16x4 2560x1330 raster_timings wyłączone (ae7a84ca 28.04):
             total  setup  bins  tiles  raster_bin
     #boxes: 1705   23     57    5      1541      
      bunny: 490    70     49    5      303       
 conference: 1342   61     109   5      1028      
conf-e(256): 1267   61     108   5      953       
     dragon: 918    188    66    100    236       
    gallery: 2451   216    75    121    1588      
     sponza: 3920   62     124   6      3568      
sponza(256): 3864   62     125   6      3510      
     teapot: 475    28     48    5      340       
  white_oak: 14091  51     251   6      13512     


Wersja 8x8 2560x1330 raster_timings wyłączone:
            total  setup  bins  tiles  raster_bin 
     #boxes: 1666   24     58    5      1512      (-2%)
      bunny: 500    69     49    5      300       (-1%)
 conference: 1343   62     110   5      1025      
conf-e(256): 1250   61     110   5      934       (-2%)
     dragon: 935    188    72    100    254       
    gallery: 2516   217    79    125    1650      
     sponza: 3892   63     126   6      3533      
sponza(256): 3818   63     123   6      3473      (-1%)
     teapot: 460    28     46    5      329       
  white_oak: 13962  51     254   7      13388     (-1%)