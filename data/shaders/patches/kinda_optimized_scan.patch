diff --git a/data/shaders/raster_bin_fastest.shader b/data/shaders/raster_bin_fastest.shader
index b215f9b..d9dd009 100644
--- a/data/shaders/raster_bin_fastest.shader
+++ b/data/shaders/raster_bin_fastest.shader
@@ -383,45 +383,74 @@ uint computeScanlineParams(vec3 tri0, vec3 tri1, vec3 tri2, out vec3 scan_base,
 
 void generateRowTris(uint tri_idx, vec3 tri0, vec3 tri1, vec3 tri2, int min_by, int max_by) {
 	// Inspired by Nanite scanline rasterizer
-	vec3 scan_min, scan_max, scan_step;
-
+	vec4 scan, scan_step;
+	bool max_first;
 	{
 		float sx = s_bin_pos.x - 0.5f;
 		float sy = s_bin_pos.y + (float(min_by) * 4.0 + 0.5f);
 
 		vec3 scan_base;
-		uint sign_mask = computeScanlineParams(tri0, tri1, tri2, scan_base, scan_step);
-
-		vec3 scan = scan_step * sy + scan_base - vec3(sx, sx, sx);
-		scan_min = vec3((sign_mask & 1) == 0 ? scan[0] : -1.0 / 0.0,
-						(sign_mask & 2) == 0 ? scan[1] : -1.0 / 0.0,
-						(sign_mask & 4) == 0 ? scan[2] : -1.0 / 0.0);
-		scan_max = vec3((sign_mask & 1) != 0 ? scan[0] : 1.0 / 0.0,
-						(sign_mask & 2) != 0 ? scan[1] : 1.0 / 0.0,
-						(sign_mask & 4) != 0 ? scan[2] : 1.0 / 0.0);
+		// Set bits select components which feed into max
+		vec3 tscan_step;
+		uint max_mask = computeScanlineParams(tri0, tri1, tri2, scan_base, tscan_step);
+		vec3 tscan = tscan_step * sy + scan_base - vec3(sx, sx, sx);
+
+		int num_max = bitCount(max_mask);
+		uint min_mask = max_mask ^ 7;
+		int max_lsb = findLSB(max_mask), min_lsb = findLSB(min_mask);
+		int max_msb = findMSB(max_mask), min_msb = findMSB(min_mask);
+
+		// This shouldn't happen; but it happens on sponza!
+		if(num_max == 0 || num_max == 3)
+			RECORD(max_mask, num_max, 0, 0);
+
+		vec2 v0 = vec2(tscan.x, tscan_step.x);
+		vec2 v1 = vec2(tscan.y, tscan_step.y);
+		vec2 v2 = vec2(tscan.z, tscan_step.z);
+
+		vec2 m0 = min_lsb == 0 ? v0 : min_lsb == 1 ? v1 : v2;
+		vec2 m1 = min_msb == 0 ? v0 : min_msb == 1 ? v1 : v2;
+		vec2 m2 = max_lsb == 0 ? v0 : max_lsb == 1 ? v1 : v2;
+		vec2 m3 = max_msb == 0 ? v0 : max_msb == 1 ? v1 : v2;
+
+		scan = vec4(m0.x, m1.x, m2.x, m3.x);
+		scan_step = vec4(m0.y, m1.y, m2.y, m3.y);
 	}
 
 	uint dst_offset_64 = scratch64BlockRowTrisOffset(0);
 	uint dst_offset_32 = scratch32BlockRowTrisOffset(0);
 
 	for(int by = min_by; by <= max_by; by++) {
-		float xmin0 = max(max(scan_min[0], scan_min[1]), max(scan_min[2], 0.0));
-		float xmax0 = min(min(scan_max[0], scan_max[1]), min(scan_max[2], BIN_SIZE));
+		int imin0 = int(max(max(scan[0], scan[1]), 0.0));
+		int imax0 = int(min(min(scan[2], scan[3]), BIN_SIZE)) - 1;
+		scan += scan_step;
+		int imin1 = int(max(max(scan[0], scan[1]), 0.0));
+		int imax1 = int(min(min(scan[2], scan[3]), BIN_SIZE)) - 1;
+		scan += scan_step;
+		int imin2 = int(max(max(scan[0], scan[1]), 0.0));
+		int imax2 = int(min(min(scan[2], scan[3]), BIN_SIZE)) - 1;
+		scan += scan_step;
+		int imin3 = int(max(max(scan[0], scan[1]), 0.0));
+		int imax3 = int(min(min(scan[2], scan[3]), BIN_SIZE)) - 1;
+		scan += scan_step;
+
+		/*float xmin0 = max(max(scan_min[0], scan_min[1]), max(scan_min[2], 0.0));
+		float xmax0 = -max(max(scan_max[0], scan_max[1]), max(scan_max[2], -BIN_SIZE));
 		scan_min += scan_step, scan_max += scan_step;
 		float xmin1 = max(max(scan_min[0], scan_min[1]), max(scan_min[2], 0.0));
-		float xmax1 = min(min(scan_max[0], scan_max[1]), min(scan_max[2], BIN_SIZE));
+		float xmax1 = -max(max(scan_max[0], scan_max[1]), max(scan_max[2], -BIN_SIZE));
 		scan_min += scan_step, scan_max += scan_step;
 		float xmin2 = max(max(scan_min[0], scan_min[1]), max(scan_min[2], 0.0));
-		float xmax2 = min(min(scan_max[0], scan_max[1]), min(scan_max[2], BIN_SIZE));
+		float xmax2 = -max(max(scan_max[0], scan_max[1]), max(scan_max[2], -BIN_SIZE));
 		scan_min += scan_step, scan_max += scan_step;
 		float xmin3 = max(max(scan_min[0], scan_min[1]), max(scan_min[2], 0.0));
-		float xmax3 = min(min(scan_max[0], scan_max[1]), min(scan_max[2], BIN_SIZE));
+		float xmax3 = -max(max(scan_max[0], scan_max[1]), max(scan_max[2], -BIN_SIZE));
 		scan_min += scan_step, scan_max += scan_step;
 
 		int imin0 = int(xmin0), imax0 = int(xmax0) - 1;
 		int imin1 = int(xmin1), imax1 = int(xmax1) - 1;
 		int imin2 = int(xmin2), imax2 = int(xmax2) - 1;
-		int imin3 = int(xmin3), imax3 = int(xmax3) - 1;
+		int imin3 = int(xmin3), imax3 = int(xmax3) - 1;*/
 
 		if(imin0 > imax0)
 			imin0 = 63, imax0 = 0;
